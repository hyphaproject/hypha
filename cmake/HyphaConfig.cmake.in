if (CMAKE_VERSION VERSION_LESS 3.0.0)
    message(FATAL_ERROR "Hypha requires at least CMake version 3.0.0")
endif()

if (NOT Hypha_FIND_COMPONENTS)
    set(Hypha_NOT_FOUND_MESSAGE "The Hypha package requires at least one component")
    set(Hypha_FOUND False)
    return()
endif()

set(_Hypha_FIND_PARTS_REQUIRED)
if (Hypha_FIND_REQUIRED)
    set(_Hypha_FIND_PARTS_REQUIRED REQUIRED)
endif()
set(_Hypha_FIND_PARTS_QUIET)
if (Hypha_FIND_QUIETLY)
    set(_Hypha_FIND_PARTS_QUIET QUIET)
endif()

get_filename_component(_Hypha_install_prefix "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)

set(_Hypha_NOTFOUND_MESSAGE)

# Let components find each other, but don't overwrite CMAKE_PREFIX_PATH
set(_Hypha_CMAKE_PREFIX_PATH_old ${CMAKE_PREFIX_PATH})
set(CMAKE_PREFIX_PATH ${_Hypha_install_prefix})

foreach(module ${Hypha_FIND_COMPONENTS})
    find_package(Hypha${module}
        ${_Hypha_FIND_PARTS_QUIET}
        ${_Hypha_FIND_PARTS_REQUIRED}
        PATHS "${_Hypha_install_prefix}" NO_DEFAULT_PATH
    )
    if (NOT Hypha${module}_FOUND)
        if (Hypha_FIND_REQUIRED_${module})
            set(_Hypha_NOTFOUND_MESSAGE "${_Hypha_NOTFOUND_MESSAGE}Failed to find Hypha component \"${module}\" config file at \"${_Hypha_install_prefix}/Hypha${module}/Hypha${module}Config.cmake\"\n")
        elseif(NOT Hypha_FIND_QUIETLY)
            message(WARNING "Failed to find Hypha component \"${module}\" config file at \"${_Hypha_install_prefix}/Hypha${module}/Hypha${module}Config.cmake\"")
        endif()
    endif()

    # For backward compatibility set the LIBRARIES variable
    list(APPEND Hypha_LIBRARIES "Hypha::${module}")
endforeach()

# Restore the original CMAKE_PREFIX_PATH value
set(CMAKE_PREFIX_PATH ${_Hypha_CMAKE_PREFIX_PATH_old})

if (_Hypha_NOTFOUND_MESSAGE)
    set(Hypha_NOT_FOUND_MESSAGE "${_Hypha_NOTFOUND_MESSAGE}")
    set(Hypha_FOUND False)
endif()


